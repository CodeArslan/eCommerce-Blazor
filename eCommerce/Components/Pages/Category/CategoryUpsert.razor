@page "/Category/Create"
@page "/Category/Update/{Id:int}"

@inject ICategoryRepository _CategoryRepository
@inject NavigationManager _NavigationManager
@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/Loader.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0? "Create" : "Update")Category </h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Category" FormName="CategoryUpsert" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator/>
                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Category.Name" class="form-control" id="Name" placeholder="Name" />
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(()=>Category.Name)" />
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                            <i class="bi bi-floppy"></i> @(Category.Id > 0 ? "Update" : "Add")
                        </button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a href="Category" class="btn btn-secondary form-control">
                            <i class="bi bi-card-list"></i> Category List
                        </a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id{ get; set; }
    public bool IsProcessing = true;

    [SupplyParameterFromForm]
    private Category Category { get; set; } = new Category();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategory();
            IsProcessing = false;
            StateHasChanged();
        }
    }
    private async Task LoadCategory()
    {
        if(Id > 0)
        {
            Category = await _CategoryRepository.GetAsync(Id);
        }
    }

    private async Task UpsertCategory()
    {
        IsProcessing = true;
        if(Category.Id == 0)
        {
            await _CategoryRepository.CreateAsync(Category); 
        }
        else{
            await _CategoryRepository.UpdateAsync(Category);
        }
        IsProcessing = false;
        _NavigationManager.NavigateTo("Category");
    }
}
