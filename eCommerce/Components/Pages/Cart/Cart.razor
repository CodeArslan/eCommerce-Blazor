@page "/Cart"
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using eCommerce.Utility
@using Services
@inject SharedStateService _SharedStateService 
@inject ICartRepository _CartRepository
@inject IOrderRepository _OrderRepository
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JSRuntime
@inject NavigationManager _NavigationManager
@inject PaymentService _PaymentService

@attribute [Authorize]


@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/Loader.gif" alt="loading" />
    </div>
}
else
{
    @if (Carts.Any())
    {
        <div class="row w-100 m-1">
            <div class="col-lg-6 col-12">
                <RadzenCard Style="margin: 1rem 0; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); height: 435px; overflow-y: auto;">
                    <RadzenText TextStyle="TextStyle.H5" Class="rz-text-center rz-mb-4" Style="color: #2e7d32; border-bottom: 2px solid #e0e0e0; padding-bottom: 1rem;">
                        Cart Summary
                    </RadzenText>
                    @foreach (var Item in Carts)
                    {
                        <RadzenCard Class="rz-mb-4" Style="border-left: 4px solid #4CAF50; transition: all 0.3s ease;" HoverStyle="transform: translateX(8px);">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="1.5rem">
                                <RadzenImage Path="@(Item.Product.ImageUrl ?? "/images/products/default.jpg")"
                                             Style="width: 100px; height: 100px; object-fit: cover; border-radius: 8px;" />

                                <RadzenStack Orientation="Orientation.Vertical" Class="rz-flex-grow-1">
                                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: 600; color: #37474f;">
                                            @Item.Product.Name
                                        </RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2" Style="color: #78909c;">
                                            @Item.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                        </RadzenText>
                                    </RadzenStack>

                                    <RadzenText TextStyle="TextStyle.Body1" Style="color: #d32f2f; font-weight: 700;">
                                        Total: @((Item.Product.Price * Item.Count).ToString("C", CultureInfo.GetCultureInfo("en-us")))
                                    </RadzenText>

                                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                                            <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                                          Icon="remove"
                                                          Click="@(() => UpdateCartItem(Item.ProductId, -1))"
                                                          Variant="Variant.Text"
                                                          Style="color: #607d8b;" />

                                            <RadzenText TextStyle="TextStyle.Body1" Style="min-width: 30px; text-align: center; font-weight: 600;">
                                                @Item.Count
                                            </RadzenText>

                                            <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                                          Icon="Add"
                                                          Click="@(() => UpdateCartItem(Item.ProductId, 1))"
                                                          Variant="Variant.Text"
                                                          Style="color: #607d8b;" />
                                        </RadzenStack>

                                        <RadzenButton Text="Remove"
                                                      ButtonStyle="ButtonStyle.Danger"
                                                      Click="@(() => UpdateCartItem(Item.ProductId, -10000))"
                                                      Variant="Variant.Outlined"
                                                      Icon="delete" />
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    }
                </RadzenCard>
            </div>

            <div class="col-lg-6 col-12">
                <RadzenCard Style="margin-top: 1rem; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); height: 435px;">
                    <RadzenText TextStyle="TextStyle.H5" Class="rz-text-center rz-mb-4" Style="color: #2e7d32; border-bottom: 2px solid #e0e0e0; padding-bottom: 1rem;">
                        Pickup Details
                    </RadzenText>

                    <EditForm Model="OrderHeader" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                        <DataAnnotationsValidator />
                        <RadzenStack Orientation="Orientation.Vertical" Gap="1.5rem">
                            <!-- Name and Phone in one row -->
                            <RadzenRow>
                                <RadzenColumn Size="6">
                                    <RadzenFormField Text="Name" Style="width: 100%;">
                                        <RadzenTextBox @bind-Value="OrderHeader.Name" Style="width: 100%" />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(() => OrderHeader.Name)" Class="rz-color-danger" />
                                </RadzenColumn>
                                <RadzenColumn Size="6">
                                    <RadzenFormField Text="Phone" Style="width: 100%;">
                                        <RadzenTextBox @bind-Value="OrderHeader.PhoneNumber" Style="width: 100%" />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(() => OrderHeader.PhoneNumber)" Class="rz-color-danger" />
                                </RadzenColumn>
                            </RadzenRow>

                            <!-- Email in the next row -->
                            <RadzenRow>
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Email" Style="width: 100%;">
                                        <RadzenTextBox @bind-Value="OrderHeader.Email" Style="width: 100%" />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(() => OrderHeader.Email)" Class="rz-color-danger" />
                                </RadzenColumn>
                            </RadzenRow>

                            <!-- Grand Total and Items in Cart -->
                            <RadzenCard Style="background-color: #f8f9fa; border-left: 4px solid #4CAF50; margin: 0.5rem 0;">
                                <RadzenStack Orientation="Orientation.Vertical">
                                    <RadzenText TextStyle="TextStyle.Body1" Style="font-weight: 600; color: #37474f;">
                                        Grand Total: @OrderHeader.GrandTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2" Style="color: #78909c;">
                                        Items in Cart: @TotalItems
                                    </RadzenText>
                                </RadzenStack>
                            </RadzenCard>

                            <!-- Submit Button -->
                            <RadzenButton ButtonType="ButtonType.Submit"
                                          Text="Looks Good? Place Order!"
                                          Icon="check_circle"
                                          ButtonStyle="ButtonStyle.Success"
                                          Variant="Variant.Filled"
                                          Style="width: 100%; padding: 1rem; font-weight: 600;"
                                          HoverStyle="transform: translateY(-1px); box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);" />
                        </RadzenStack>
                    </EditForm>
                </RadzenCard>
            </div>
        </div>
    
    }
    else{
        <div class="p-4">
            <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
                Your Cart is Empty! Please Add Items To Cart
            </RadzenAlert>
        </div>
    }
}


@code {
    public bool IsProcessing = true;

    [SupplyParameterFromForm]
    public OrderHeader OrderHeader { get; set; } = new OrderHeader();

    private int TotalItems { get; set; } = 0;
    private IEnumerable<eCommerce.Data.Cart> Carts = new List<eCommerce.Data.Cart>();

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var User = AuthState.User;
        OrderHeader.Email = User.FindFirst(u => u.Type.Contains("email"))?.Value ?? string.Empty;
        OrderHeader.UserId = User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value ?? string.Empty;
        OrderHeader.Status = StaticDetails.StatusPending;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCart();
            IsProcessing = false;
            StateHasChanged();
        }
    }
    private async Task LoadCart()
    {
        Carts = await _CartRepository.GetAllAsync(OrderHeader.UserId);
        OrderHeader.GrandTotal = 0;
        TotalItems = 0;
        foreach(var cart in Carts)
        {
            OrderHeader.GrandTotal += Convert.ToDouble(cart.Product.Price) * cart.Count;
            TotalItems += cart.Count;
        }
        OrderHeader.GrandTotal = Math.Round(OrderHeader.GrandTotal, 2);

    }



    private async Task UpdateCartItem(int ProductId, int Count)
    {
        var AuthState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var User = AuthState.User;
        var Result = await _CartRepository.UpdateCartAsync(OrderHeader.UserId, ProductId, Count);
        _SharedStateService.TotalCartCount = await _CartRepository.GetTotalCartCountAsync(User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value);
        await LoadCart();
    }

    private async Task ProcessOrderCreation()
    {
        IsProcessing = true;
        await Task.Yield();
        OrderHeader.OrderDetails = StaticDetails.ConvertShoppinCartListToOrderDetailList(Carts.ToList());

        var session = _PaymentService.CreateStripeCheckoutSession(OrderHeader);
        OrderHeader.SessionId = session.Id;
        var Result = await _OrderRepository.CreateAsync(OrderHeader);
        _NavigationManager.NavigateTo(session.Url);
    }
}
