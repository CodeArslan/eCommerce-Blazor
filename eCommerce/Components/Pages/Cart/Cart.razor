@page "/Cart"
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using eCommerce.Utility
@using Services
@inject SharedStateService _SharedStateService 
@inject ICartRepository _CartRepository
@inject IOrderRepository _OrderRepository
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JSRuntime
@inject NavigationManager _NavigationManager

@attribute [Authorize]


@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/Loader.gif" alt="loading" />
    </div>
}
else
{
    @if (Carts.Any())
    {
        <div class="row w-100">
            <div class="col-lg-6 col-12">
                <div class="container p-4 m-2">
                    <h4 class="text-center text-success display-6">
                        Cart Summary
                    </h4>
                    @foreach (var Item in Carts)
                    {
                        <div class="d-flex p-2 m-2">
                            <div class="card flex-row w-100">
                                <img class="card-img-left" style="width: 120px;" src="@(Item.Product.ImageUrl ?? "/images/products/default.jpg")">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h4>
                                            @Item.Product.Name
                                        </h4>
                                        <h4>
                                            @Item.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                        </h4>
                                    </div>
                                    <div class="flex-fill">
                                        <h4 class="text-danger">@((Item.Product.Price * Item.Count).ToString("C", CultureInfo.GetCultureInfo("en-us")))</h4>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex justify-content-between gap-2">
                                            <span @onclick="()=>UpdateCartItem(Item.ProductId,-1)">
                                                <i class="bi bi-dash-circle-fill btn text-secondary"></i>
                                            </span>
                                            <span class="mx-2">
                                                <b class="lead">@Item.Count</b>
                                            </span>
                                            <span @onclick="()=>UpdateCartItem(Item.ProductId,1)">
                                                <i class="bi bi-plus-circle-fill btn text-secondary"></i>
                                            </span>
                                        </div>
                                        <button @onclick="()=>UpdateCartItem(Item.ProductId,-10000)" class="btn btn-danger">Remove</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>

            <div class="col-lg-6 col-12">
                <div class="card mt-2">
                    <div class="card-header text-success text-center display-6">
                        Pickup Details
                    </div>
                    <EditForm Model="OrderHeader" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                        <DataAnnotationsValidator/>
                        <div class="card-body">

                            <div class="form-group">
                                <label for="name">Name</label>
                                <InputText @bind-Value="OrderHeader.Name" type="text" id="name" class="form-control" />
                                <ValidationMessage For="@(() => OrderHeader.Name)" />
                            </div>
                            <div class="form-group">
                                <label for="email">Email</label>
                                <InputText @bind-Value="OrderHeader.Email" type="text" id="email" class="form-control" />
                                <ValidationMessage For="@(() => OrderHeader.Email)" />
                            </div>
                            <div class="form-group">
                                <label for="phone">Phone</label>
                                <InputText @bind-Value="OrderHeader.PhoneNumber" type="text" id="phone" class="form-control" />
                                <ValidationMessage For="@(() => OrderHeader.PhoneNumber)" />
                            </div>

                            <div class="card mt-4 bg-light">
                                <div class="card-body">
                                    <h4>
                                        Grand Total: @OrderHeader.GrandTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                    </h4>
                                    <h4>
                                        No. of Items: @TotalItems
                                    </h4>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-success m-4">
                            Looks Good? Place Order!
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    else{
        <div class="p-4">
            <div class="alert alert-warning">
                Your Cart is Empty! Please Add Items To Cart
            </div>
        </div>
    }
}


@code {
    public bool IsProcessing = true;

    [SupplyParameterFromForm]
    public OrderHeader OrderHeader { get; set; } = new OrderHeader();

    private int TotalItems { get; set; } = 0;
    private IEnumerable<eCommerce.Data.Cart> Carts = new List<eCommerce.Data.Cart>();

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var User = AuthState.User;
        OrderHeader.Email = User.FindFirst(u => u.Type.Contains("email"))?.Value ?? string.Empty;
        OrderHeader.UserId = User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value ?? string.Empty;
        OrderHeader.Status = StaticDetails.StatusPending;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCart();
            IsProcessing = false;
            StateHasChanged();
        }
    }
    private async Task LoadCart()
    {
        Carts = await _CartRepository.GetAllAsync(OrderHeader.UserId);
        OrderHeader.GrandTotal = 0;
        TotalItems = 0;
        foreach(var cart in Carts)
        {
            OrderHeader.GrandTotal += Convert.ToDouble(cart.Product.Price) * cart.Count;
            TotalItems += cart.Count;
        }
        OrderHeader.GrandTotal = Math.Round(OrderHeader.GrandTotal, 2);

    }



    private async Task UpdateCartItem(int ProductId, int Count)
    {
        var AuthState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var User = AuthState.User;
        var Result = await _CartRepository.UpdateCartAsync(OrderHeader.UserId, ProductId, Count);
        _SharedStateService.TotalCartCount = await _CartRepository.GetTotalCartCountAsync(User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value);
        await LoadCart();
    }

    private async Task ProcessOrderCreation()
    {
        IsProcessing = true;
        await Task.Yield();
        OrderHeader.OrderDetails = StaticDetails.ConvertShoppinCartListToOrderDetailList(Carts.ToList());
        var Result = await _OrderRepository.CreateAsync(OrderHeader);
        _NavigationManager.NavigateTo($"/Order/Confirmation/{Result.Id}");
    }
}
