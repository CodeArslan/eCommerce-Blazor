@page "/Order/List"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using eCommerce.Utility
@inject IOrderRepository _OrderRepository
@inject IJSRuntime _JS
@inject NavigationManager _NavigationManager
@attribute [Authorize]
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/Loader.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Order List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            @if (OrderHeader.Any())
            {
                <!-- Search input field -->
                <div class="d-flex justify-content-end mb-3">
                    <RadzenTextBox @bind-Value="searchText" Placeholder="Search..." Style="width: 35%;" />
                </div>

                <RadzenDataGrid GridLines="DataGridGridLines.Both" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                Data="@FilteredOrders" ColumnWidth="140px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedOrders>
                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
                    </EmptyTemplate>
                                <Columns>
                        <RadzenDataGridColumn Property="Id" Filterable="false" Title="ID" Frozen="true" Width="80px" FrozenPosition="FrozenColumnPosition.Left" />
                        <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" />
                        <RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" />
                        <RadzenDataGridColumn Property="Email" Title="Email" Width="150px" />
                        <RadzenDataGridColumn Property="GrandTotal" Title="Grand Total" FormatString="{0:C}" />
                        <RadzenDataGridColumn Property="OrderDate" Title="Order Date" FormatString="{0:d}" />
                        <RadzenDataGridColumn Property="Status" Title="Status" />
                        <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                            <Template Context="OrderHeader">
                                <RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Primary" Click="@(() => _NavigationManager.NavigateTo($"Order/Details/{OrderHeader.Id}"))"></RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
        </div>
    </div>
}

@code {
    public bool IsProcessing = true;
    private IEnumerable<OrderHeader> OrderHeader { get; set; } = new List<OrderHeader>();
    IList<OrderHeader> selectedOrders;
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    private string searchText = string.Empty;
    private bool? IsAdmin { get; set; }
    private string? UserId { get; set; }
    private IEnumerable<OrderHeader> FilteredOrders => OrderHeader
        .Where(order =>
            order.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
            order.PhoneNumber.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
            order.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
            order.Status.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
            order.GrandTotal.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
            order.OrderDate.ToString("d").Contains(searchText, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrders();
            IsProcessing = false;
            StateHasChanged();
        }
    }
    private async Task LoadOrders()
    {
        IsProcessing = true;
        StateHasChanged();
        await CheckAuthorization();
        @if(IsAdmin == true){
            OrderHeader = await _OrderRepository.GetAllAsync();
        }
        else
        {
            OrderHeader = await _OrderRepository.GetAllAsync(UserId);
        }
        selectedOrders = new List<OrderHeader>() { OrderHeader.FirstOrDefault() };
        IsProcessing = false;
    }


    private async Task CheckAuthorization()
    {
        if(AuthenticationState is not null)
        {
            var authstate = await AuthenticationState;
            var user = authstate?.User;
            IsAdmin = user?.IsInRole(StaticDetails.Role_Admin);
            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
       
    }
}
