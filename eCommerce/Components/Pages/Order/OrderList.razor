@page "/Order/List"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using eCommerce.Utility
@inject IOrderRepository _OrderRepository
@inject IJSRuntime _JS
@attribute [Authorize]
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/Loader.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Order List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            @if (OrderHeader.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Phone</th>
                            <th>Email</th>
                            <th>Total</th>
                            <th>Date</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in OrderHeader)
                        {
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.Name</td>
                                <td>@item.PhoneNumber</td>
                                <td>@item.Email</td>
                                <td>@item.GrandTotal.ToString("c")</td>
                                <td>@item.OrderDate</td>
                                <td>@item.Status</td>
                                <td>
                                    <a href="@($"Order/Details/{item.Id}")" class="btn btn-primary"><i class="bi bi-pencil-square"></i>Details</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </div>
    </div>
}

@code {
    public bool IsProcessing = true;
    private IEnumerable<OrderHeader> OrderHeader { get; set; } = new List<OrderHeader>();
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private bool? IsAdmin { get; set; }
    private string? UserId { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrders();
            IsProcessing = false;
            StateHasChanged();
        }
    }
    private async Task LoadOrders()
    {
        IsProcessing = true;
        StateHasChanged();
        await CheckAuthorization();
        @if(IsAdmin == true){
            OrderHeader = await _OrderRepository.GetAllAsync();
        }
        else
        {
            OrderHeader = await _OrderRepository.GetAllAsync(UserId);
        }
        IsProcessing = false;
    }


    private async Task CheckAuthorization()
    {
        if(AuthenticationState is not null)
        {
            var authstate = await AuthenticationState;
            var user = authstate?.User;
            IsAdmin = user?.IsInRole(StaticDetails.Role_Admin);
            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
       
    }
}
