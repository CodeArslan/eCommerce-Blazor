@page "/"
@using Services

@inject IProductRepository _ProductRepository
@inject ICategoryRepository _CategoryRepository
@inject ICartRepository _CartRepository
@inject NavigationManager _NavigationManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JSRuntime
@inject SharedStateService _SharedStateService
@inject NotificationService NotificationService

<PageTitle>Home</PageTitle>

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/Loader.gif" alt="loading" />
    </div>
}

else{
    <div class="container-fluid px-0 m-0 full-width">

        <div class="jumbotron-custom">
            <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">
               <RadzenTextBox @bind-Value="_SearchText" Placeholder="Search for Food Items!"
               Style="width: 100%;" 
               Change="FilterProductByName">
               </RadzenTextBox>
                <RadzenIcon IconColor="@Colors.Primary" Icon="search" Style="position: relative; left: -43px;" />

            </div>
        </div>
        <div class="content px-4">
            <ul class="nav nav-underline justify-content-center mb-2">
                <li class="nav-item">
                    <span class="nav-link @GetActiveClass(0)" href="#" style="cursor: pointer" @onclick="()=>FilterProducts(0)">All</span>
                </li>
                @foreach(var cat in Categories)
                {
                    <li class="nav-item">
                        <span class="nav-link @GetActiveClass(cat.Id)" href="#" style="cursor: pointer" @onclick="()=>FilterProducts(cat.Id)">@cat.Name</span>
                    </li>
                }
            </ul>

            <div class="row mx-1">
                @foreach(var prod in FilteredProducts)
                {
                    <RadzenCard class="rz-my-12 rz-mx-auto" Style="max-width: 300px">
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-4">
                            <RadzenImage Path="@prod.ImageUrl" Style="width: 100px; height: 100px; border-radius: 50%;" />
                            <RadzenStack Gap="0">
                                @if (!string.IsNullOrEmpty(prod.SpecialTag))
                                {
                                  @*   <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Special Tag</RadzenText> *@
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        <RadzenBadge Text="@prod.SpecialTag" Style="background-color: #28a745; color: white; padding: 5px; border-radius: 5px;" />
                                    </RadzenText>
                                }
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Product Name</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1"><b>@prod.Name</b></RadzenText>
                            </RadzenStack>
                        </RadzenStack>

                        <RadzenCard class="rz-background-color-primary-light rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 0.5rem calc(-1 * var(--rz-card-padding));">
                            <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Information</strong></RadzenText>
                            <RadzenRow RowGap="0">
                                <RadzenColumn SizeSM="6">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Price</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light">
                                        <b>@prod.Price.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("en-US"))</b>
                                    </RadzenText>
                                </RadzenColumn>
                                <RadzenColumn SizeSM="6">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Category</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@prod.Category.Name</b></RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow RowGap="0" class="rz-mt-4">
                                <RadzenColumn SizeSM="12">
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mb-0">Description</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@prod.Description</b></RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>


                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0">
                            <RadzenButton Variant="Variant.Text" Text="Add to Cart" Click="() => AddProductToCart(prod)" />
                        </RadzenStack>
                    </RadzenCard>


                   @*  <div class="col-12 col-md-6 col-lg-4 pe−3 mb-5">
                        <div class="card card-fixed-height">
                            <div class="mt-3 mb-2 row">
                                <div class="col-6 px-3">
                                    @if(!string.IsNullOrEmpty(prod.SpecialTag))
                                    {
                                        <i class="bi bi-star btn btn-outline-success btn-sm disabled">@prod.SpecialTag</i>
                                    }
                                </div>
                                <div class="col-6 text-end px-3 h-4 text-danger mt-2">
                                    @prod.Price.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("en-US"))
                                </div>
                            </div>
                            <div class="text-center">
                                @if(!string.IsNullOrEmpty(prod.ImageUrl)){
                                    <img class="card-img-fixed img-thumbnail img-rounded mt-2" src="@prod.ImageUrl" style="">
                                }
                                else{
                                    <img class="card-img-fixed img-thumbnail img-rounded mt-2" src="images/products/default.jpg" style="">
                                }

                            </div>
                            <div class="card-body">
                                <h5 class="card-title text-center lead text-success">@prod.Name</h5>

                                <h4 class="text-center">
                                    <div class="m-lg-auto p-2" @onclick="()=>AddProductToCart(prod)">
                                        <i class="bi bi-cart3 btn btn-success text-right px-5 form-control">Add to cart</i>
                                    </div>
                                </h4>
                                @*   <p class="card-text mt-2">@((MarkupString)prod.Description)</p> *@
                            @* </div>
                        </div>
                    </div> *@ 
                }
            </div>
        </div>
    </div>
}
@code{
    public bool IsProcessing = true;
    private IEnumerable<eCommerce.Data.Product> Products = new List<eCommerce.Data.Product>();
    private IEnumerable<eCommerce.Data.Product> FilteredProducts = new List<eCommerce.Data.Product>();
    private IEnumerable<eCommerce.Data.Category> Categories { get; set; } = new List<eCommerce.Data.Category>();

    private int _SelectedCategoryId = 0;
    public string _SearchText = "";
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductsandCategories();
            IsProcessing = false;
            StateHasChanged();
        }
    }
    private async Task LoadProductsandCategories()
    {
        Products = await _ProductRepository.GetAllAsync();
        Categories = await _CategoryRepository.GetAllAsync();
        FilterProducts(0);
    }

    private void FilterProducts(int catId)
    {
        if(catId == 0)
        {
            FilteredProducts = Products;
            _SelectedCategoryId = catId;
            return;
        }
        else{
            FilteredProducts = Products.Where(n => n.CategoryId==catId).ToList();
            _SelectedCategoryId = catId;
            _SearchText = String.Empty;
            return;
        }
    }
    private void FilterProductByName(string name)
    {
        if (!string.IsNullOrWhiteSpace(name))
        {
            FilteredProducts = Products.Where(n => n.Name.Contains(name, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        else{
            FilteredProducts = Products;
        }
        _SearchText = name;
    }

    private string GetActiveClass(int CatId)
    {
        return CatId == _SelectedCategoryId ? "active" : String.Empty;
    }


    private async Task AddProductToCart(eCommerce.Data.Product product){
        IsProcessing = true;
        var AuthState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var User = AuthState.User;
        var Authenticated = User.Identity is not null && User.Identity.IsAuthenticated;
        _SharedStateService.TotalCartCount = await _CartRepository.GetTotalCartCountAsync(User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value);
        if (!Authenticated)
        {
            await _JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/Account/Login';");
        }
        else{
            var Result = await _CartRepository.UpdateCartAsync(User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value, product.Id, 1);
            if(Result)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Style = "width:auto;margin-top:-80px",
                        Severity = NotificationSeverity.Success,
                        Summary = "Success",
                        Detail = "Item added to Cart",
                        Duration = 2000
                    });
            }
            else{
                NotificationService.Notify(new NotificationMessage
                    {
                        Style = "width:auto;margin-top:-80px",
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Failed to Add Item to Cart",
                        Duration = 2000
                    });
            }
        }
        IsProcessing = false;
    }
}
