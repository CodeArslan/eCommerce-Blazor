@page "/Product/Create"
@page "/Product/Update/{Id:int}"

@inject IProductRepository _ProductRepository
@inject ICategoryRepository _CategoryRepository
@inject IWebHostEnvironment _WebHostEnvironment
@inject NavigationManager _NavigationManager
@inject NotificationService NotificationService
@inject IJSRuntime _JS


@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/Loader.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id == 0? "Create" : "Update") Product</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="card-body p-4">
                <RadzenTemplateForm Data="@Product" Submit="@(async (Product product) => await UpsertProduct(product))">
                    <DataAnnotationsValidator />
                    <div class="border p-3 mt-4">
                        <RadzenRow Gap="1.5rem">

                            <!-- Name -->
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenFormField Text="Name" Style="width: 100%;">
                                    <RadzenTextBox @bind-Value="Product.Name" Placeholder="Name" Style="width: 100%;" />
                                </RadzenFormField>
                                <ValidationMessage For="@(() => Product.Name)" />
                            </RadzenColumn>

                            <!-- Special Tag -->
                            <RadzenColumn Size="12" SizeMD="6">
                               <RadzenFormField Text="Special Tag" Style="width: 100%;">
                                <RadzenTextBox @bind-Value="Product.SpecialTag" Placeholder="Special Tag" Style="width: 100%;" />
                                </RadzenFormField>
                                <ValidationMessage For="@(() => Product.SpecialTag)" />
                            </RadzenColumn>

                            <!-- Description (Full Width) -->
                            <RadzenColumn Size="12" class="rz-py-3">
                                <RadzenLabel Text="Description" />
                                <RadzenHtmlEditor @bind-Value=@Product.Description style="height: 300px; width: 100%;">
                                    <RadzenHtmlEditorUndo />
                                    <RadzenHtmlEditorRedo />
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorBold />
                                    <RadzenHtmlEditorItalic />
                                    <RadzenHtmlEditorUnderline />
                                    <RadzenHtmlEditorStrikeThrough />
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorColor />
                                    <RadzenHtmlEditorBackground />
                                    <RadzenHtmlEditorRemoveFormat />
                                </RadzenHtmlEditor>
                                <ValidationMessage For="@(() => Product.Description)" />
                            </RadzenColumn>

                            <!-- Price and Category -->
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenFormField Text="Price" Style="width: 100%;">
                                <RadzenNumeric @bind-Value="Product.Price" Placeholder="Price" Style="width: 100%;" Format="C2" />
                                </RadzenFormField>
                                <ValidationMessage For="@(() => Product.Price)" />
                            </RadzenColumn>

                            <RadzenColumn Size="12" SizeMD="6">
                                 <RadzenFormField Text="Category" Style="width: 100%;">
                                <RadzenDropDown @bind-Value="Product.CategoryId" Data="@_categories"
                                                TextProperty="Name" ValueProperty="Id"
                                                Placeholder="-- Select Category --" Style="width: 100%;">
                                    <ValueTemplate Context="category">
                                        @if (category == null)
                                        {
                                            <span>-- Select Category --</span>
                                        }
                                        else
                                        {
                                            @category.Name
                                        }
                                    </ValueTemplate>
                                </RadzenDropDown>
                                </RadzenFormField>
                                <ValidationMessage For="@(() => Product.CategoryId)" />
                            </RadzenColumn>

                            <!-- Image Upload (Full Width) -->
                            <RadzenColumn Size="12" class="rz-py-3">
                                @if (Product.ImageUrl == null)
                                {
                                    <RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Upload Image</RadzenText>
                                        <InputFile @bind-Value="Product.Description" OnChange="LoadFiles"
                                                   class="form-control pb-3" id="CustomFile" accept="image/x-png,image/jpeg" />
                                    </RadzenStack>
                                }
                                else
                                {
                                    <RadzenRow>
                                        <RadzenColumn Size="12" SizeMD="3">
                                            <img src="@Product.ImageUrl" class="img-thumbnail" alt="Product Image" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="9" class="rz-text-align-right">
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete"
                                                          Text="Remove Image" Click="@DeleteImage" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                }
                            </RadzenColumn>
                        </RadzenRow>
                    </div>

                    <!-- Buttons -->
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-4">
                        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="@(Product.Id == 0 ? "Add" : "Update")"
                                      Disabled="@IsProcessing" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="list" Text="Product List"
                                       Click="@NavigateToProducts" Variant="Variant.Flat" />
                    </RadzenStack>
                </RadzenTemplateForm>
            </div>
        </div>
    </div>

}

@code {
    [Parameter]
    public int Id{ get; set; }
    public bool IsProcessing = true;

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();

    private IEnumerable<Category> _categories = new List<Category>();
    private string? _DirectoryPath { get; set; }

    protected override Task OnInitializedAsync(){
        _DirectoryPath =Path.Combine(_WebHostEnvironment.WebRootPath,"images","products");
        return  base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductandCategoryList();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    public void NavigateToProducts()
    {
        _NavigationManager.NavigateTo("Product");
    }
    private async Task LoadProductandCategoryList()
    {
        if(Id > 0)
        {
            Product = await _ProductRepository.GetAsync(Id);
        }
        _categories = await _CategoryRepository.GetAllAsync();
    }

    private async Task UpsertProduct(Product product)
    {
        IsProcessing = true;
        if(Product.Id == 0)
        {
            await _ProductRepository.CreateAsync(Product);
            NotificationService.Notify(new NotificationMessage
                {
                    Style = "width:auto;margin-top:-80px",
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Product Added Successfully",
                    Duration = 2000
                });
        }
        else{
            await _ProductRepository.UpdateAsync(Product);
            NotificationService.Notify(new NotificationMessage
                {
                    Style = "width:auto;margin-top:-80px",
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Product Updated Successfully",
                    Duration = 2000
                });
        }
        IsProcessing = false;
        _NavigationManager.NavigateTo("Product");
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsProcessing = true;
        var file = e.File;
        System.IO.FileInfo fileInfo = new (file.Name);
        var NewFileName=$"{Guid.NewGuid()}.{fileInfo.Extension}";
        if(Directory.Exists(_DirectoryPath )){
            Directory.CreateDirectory(_DirectoryPath);
        }
        var path=Path.Combine(_DirectoryPath,NewFileName);
        await using FileStream fileStream = new FileStream(path,FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        Product.ImageUrl = $"/images/products/{NewFileName}";
        IsProcessing = false;
    }
    private void DeleteImage()
    {
        if(Product.ImageUrl == null)
            return;

        var FileToDelete=Product.ImageUrl.Split("/").Reverse().First();
        var FileToDeleteImage = Path.Combine(_DirectoryPath, FileToDelete);
        if(File.Exists(FileToDeleteImage))
        {
            File.Delete(FileToDeleteImage);
            Product.ImageUrl = null;
        }
        else
        {
            Product.ImageUrl = null;
            return;
        }
    }
}
