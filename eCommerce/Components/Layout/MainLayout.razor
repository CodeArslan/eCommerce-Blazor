@using eCommerce.Utility
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<RadzenLayout>
   
    <RadzenHeader Style="background-color:black" >
        <RadzenStack class="p-2" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="20px">
            @if (_NavbarVisibility)
            {
                <NavBar />
            }
            else{
                <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            }
        </RadzenStack>
    </RadzenHeader>

    <!-- Sidebar -->
     <AuthorizeView Roles="@StaticDetails.Role_Admin">
        <RadzenSidebar Responsive="false" Style="width: max-content">
            <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
                <NavMenu />
            </RadzenPanelMenu>
        </RadzenSidebar>
     </AuthorizeView>
  

    <!-- Body -->
    <RadzenBody class="p-0">
        <div>
            @Body
        </div>
    </RadzenBody>
</RadzenLayout>



@* <div class="page">

    <AuthorizeView Roles="@StaticDetails.Role_Admin">
        <div class="sidebar">
            <NavMenu />
        </div>
    </AuthorizeView>
    <main>
        @if(_NavbarVisibility)
        {
            <NavBar></NavBar>
        }

        @*  <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div> *@

@*             @Body
    </main>
</div> *@

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>
@code{
    bool sidebarExpanded = true;
    private bool _NavbarVisibility;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _NavbarVisibility = await ShowNavbar();
    }
    protected override async Task OnInitializedAsync()
    {
        _NavbarVisibility = await ShowNavbar();
    }

    private async Task<bool> ShowNavbar(){
        var AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var User = AuthState.User;
        var Authenticated = User.Identity is not null && User.Identity.IsAuthenticated;
        if(!Authenticated){
            return true;
        }
        if(!User.IsInRole(StaticDetails.Role_Admin))
        {
            return true;
        }
        return false;
    }


}