@using Services;
@inject SharedStateService _SharedStateService
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject ICartRepository _CartRepository
@inject NavigationManager Navigation


<style>
    .awesome-navbar {
        background: linear-gradient(135deg, #2b5876 0%, #4e4376 100%);
        padding: 0.8rem 2rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .nav-button {
        transition: all 0.3s ease;
        border-radius: 8px;
        padding: 0.8rem 1.5rem !important;
        border: 1px solid rgba(255,255,255,0.1) !important;
    }

        .nav-button:hover {
            background: rgba(255,255,255,0.1) !important;
            transform: translateY(-2px);
            box-shadow: 0 3px 12px rgba(0,0,0,0.2);
        }

    .cart-count {
        background: #ff4757;
        padding: 2px 8px;
        border-radius: 20px;
        font-size: 0.8em;
        margin-left: 8px;
    }

    .user-greeting {
        font-weight: 500;
        margin-right: 1rem;
        color: #fff !important;
    }

    #logout-button {
        transition: all 0.3s ease;
        background: rgba(255,255,255,0.08) !important;
        border-radius: 8px;
        padding: 0.5rem 1rem;
    }

        #logout-button:hover {
            background: rgba(255,255,255,0.15) !important;
        }
</style>

    <!-- Left-aligned Navbar Links -->
    <RadzenStack Orientation="Orientation.Horizontal" Gap="16px">
        <RadzenButton Variant="Variant.Flat" Class="nav-button text-white" Click="@(() => Navigation.NavigateTo("/"))">
            <RadzenIcon Icon="home" Style="margin-right: 8px;" />
            <span>Home</span>
        </RadzenButton>

        <RadzenButton Variant="Variant.Flat" Class="nav-button text-white" Click="@(() => Navigation.NavigateTo("/Cart"))">
            <RadzenIcon Icon="shopping_cart" Style="margin-right: 8px;" />
            <span>Cart</span>
            <span class="cart-count">@_SharedStateService.TotalCartCount</span>
        </RadzenButton>

        <RadzenButton Variant="Variant.Flat" Class="nav-button text-white" Click="@(() => Navigation.NavigateTo("/Order/List"))">
            <RadzenIcon Icon="assignment" Style="margin-right: 8px;" />
            <span>Orders</span>
        </RadzenButton>
    </RadzenStack>

    <!-- Right-aligned Navbar Items -->
    <AuthorizeView>
        <Authorized>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="24px" AlignItems="AlignItems.Center">
                <RadzenButton Variant="Variant.Text" Class="text-white user-greeting" Click="@(() => Navigation.NavigateTo("/Account/Manage"))">
                    <RadzenIcon Icon="account_circle" Style="margin-right: 8px;" />
                    @welcomeText
                </RadzenButton>

                <form action="Account/Logout" method="post" class="logout-button">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="" />
               @*  <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Flat" class="text-white" style="background:none; border:none; cursor:pointer;">
                    <RadzenIcon Icon="logout" Style="margin-right: 8px;" />
                    <span>Logout</span>
                </RadzenButton> *@

                    <RadzenButton ButtonType="ButtonType.Submit" id="logoutbutton" class="text-white" style="background:none; border:none; cursor:pointer;">
                        <RadzenIcon Icon="logout" Style="margin-right: 8px;" />
                    Logout
                    </RadzenButton>
                </form>
            </RadzenStack>
        </Authorized>
        <NotAuthorized>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="16px">
                <RadzenLink Class="nav-button text-white" Path="Account/Register">
                    <RadzenIcon Icon="person_add" Style="margin-right: 8px;" />
                    Register
                </RadzenLink>
                <RadzenLink Class="nav-button text-white" Path="Account/Login">
                    <RadzenIcon Icon="login" Style="margin-right: 8px;" />
                    Login
                </RadzenLink>
            </RadzenStack>
        </NotAuthorized>
    </AuthorizeView>


@* <nav class="navbar navbar-expand-sm navbar-dark bg-black">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
        aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarCollapse">
            <!-- Left-aligned Navbar Links -->
            <ul class="navbar-nav me-auto">
                <li class="mx-2">
                    <NavLink class="nav-link" href="#">
                        <span class="bi bi-house-door me-2" aria-hidden="true"></span>Home
                    </NavLink>
                </li>
                <li class="">
                    <NavLink class="nav-link" href="/Cart">
                        <span class="bi bi-cart3" aria-hidden="true"></span>Cart (@_SharedStateService.TotalCartCount)
                    </NavLink>
                </li>
                <li class="">
                    <NavLink class="nav-link" href="/Order/List">
                        <span class="bi bi-card-list" aria-hidden="true"></span>Orders
                    </NavLink>
                </li>
            </ul>

            <!-- Right-aligned Navbar Items -->
            <ul class="navbar-nav mb-2 mb-md-0 d-flex align-items-center">
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <NavLink class="nav-link p-2" href="Account/Manage">
                            <button class="nav-link active me-2" style="cursor:pointer; background:transparent; border:none;">
                                Welcome, <span class="ms-1">@context?.User?.Identity?.Name</span>
                            </button>
                            </NavLink>
                        </li>
                        <li class="">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="ReturnUrl" value="" />
                                <button type="submit" class="nav-link btn btn-success d-flex align-items-center">
                                    <span class="bi bi-arrow-bar-left me-2" aria-hidden="true"></span>Logout
                                </button>
                            </form>
                        </li>
                    </Authorized>
                    <NotAuthorized>
                        <li class="">
                            <NavLink class="nav-link" href="Account/Register">
                                <span class="bi bi-person me-2" aria-hidden="true"></span>Register
                            </NavLink>
                        </li>
                        <li class="nav-link">
                            <NavLink class="nav-link" href="Account/Login">
                                <span class="bi bi-person-badge me-2" aria-hidden="true"></span>Login
                            </NavLink>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>


            </ul>
        </div>
    </div>
</nav> *@
@code{
    private string welcomeText { get; set; } 
    protected override void OnInitialized()
    {
        _SharedStateService.OnChange += OnSharedStateChanged;
        GetInitialCount();
    }
    private void OnSharedStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public async Task GetInitialCount()
    {
        var AuthState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = AuthState.User;
        welcomeText = user.Identity?.Name != null ? $"Welcome, {user.Identity.Name}!" : "Welcome!";
        if (user.Identity.IsAuthenticated)
        {
            _SharedStateService.TotalCartCount = await _CartRepository.GetTotalCartCountAsync(user?.FindFirst(u=>u.Type.Contains("nameidentifier"))?.Value);
        }
    }
    public void Dispose()
    {
        _SharedStateService.OnChange -= OnSharedStateChanged;
    }
}