@using Services;
@inject SharedStateService _SharedStateService
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject ICartRepository _CartRepository
@inject NavigationManager Navigation


<!-- Left-aligned Navbar Links -->
<RadzenStack Orientation="Orientation.Horizontal" Gap="20px">
    <RadzenButton Variant="Variant.Flat" Text="Home" Icon="home" Class="text-white" Click="@(() => Navigation.NavigateTo("/"))" />
    <RadzenButton Variant="Variant.Flat" Text=@($"Cart ({_SharedStateService.TotalCartCount})") Icon="shopping_cart" Class="text-white" Click="@(() => Navigation.NavigateTo("/Cart"))" />
    <RadzenButton Variant="Variant.Flat" Text="Orders" Icon="assignment" Class="text-white" Click="@(() => Navigation.NavigateTo("/Order/List"))" />
</RadzenStack>

<!-- Right-aligned Navbar Items -->
<AuthorizeView>
    <Authorized>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="20px" AlignItems="AlignItems.Center">
            <RadzenButton Variant="Variant.Flat" Text="@welcomeText" Icon="account_circle" Class="text-white" Click="@(() => Navigation.NavigateTo("/Account/Manage"))" />
            <form action="Account/Logout" method="post" style="display: inline;">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="" />
                <button type="submit" style="background: none; border: none; color: white; cursor: pointer;">
                    <RadzenIcon Icon="logout" Style="margin-right: 5px;" />
                    Logout
                </button>
            </form>
        </RadzenStack>
    </Authorized>
    <NotAuthorized>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="20px">
            <RadzenLink Variant="Variant.Flat" Text="Register" Icon="person_add" Class="text-white" Path="Account/Register"/>
            <RadzenLink Variant="Variant.Flat" Text="Login" Icon="login" Class="text-white" Path="Account/Login" />
        </RadzenStack>
    </NotAuthorized>
</AuthorizeView>



@* <nav class="navbar navbar-expand-sm navbar-dark bg-black">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
        aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarCollapse">
            <!-- Left-aligned Navbar Links -->
            <ul class="navbar-nav me-auto">
                <li class="mx-2">
                    <NavLink class="nav-link" href="#">
                        <span class="bi bi-house-door me-2" aria-hidden="true"></span>Home
                    </NavLink>
                </li>
                <li class="">
                    <NavLink class="nav-link" href="/Cart">
                        <span class="bi bi-cart3" aria-hidden="true"></span>Cart (@_SharedStateService.TotalCartCount)
                    </NavLink>
                </li>
                <li class="">
                    <NavLink class="nav-link" href="/Order/List">
                        <span class="bi bi-card-list" aria-hidden="true"></span>Orders
                    </NavLink>
                </li>
            </ul>

            <!-- Right-aligned Navbar Items -->
            <ul class="navbar-nav mb-2 mb-md-0 d-flex align-items-center">
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <NavLink class="nav-link p-2" href="Account/Manage">
                            <button class="nav-link active me-2" style="cursor:pointer; background:transparent; border:none;">
                                Welcome, <span class="ms-1">@context?.User?.Identity?.Name</span>
                            </button>
                            </NavLink>
                        </li>
                        <li class="">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="ReturnUrl" value="" />
                                <button type="submit" class="nav-link btn btn-success d-flex align-items-center">
                                    <span class="bi bi-arrow-bar-left me-2" aria-hidden="true"></span>Logout
                                </button>
                            </form>
                        </li>
                    </Authorized>
                    <NotAuthorized>
                        <li class="">
                            <NavLink class="nav-link" href="Account/Register">
                                <span class="bi bi-person me-2" aria-hidden="true"></span>Register
                            </NavLink>
                        </li>
                        <li class="nav-link">
                            <NavLink class="nav-link" href="Account/Login">
                                <span class="bi bi-person-badge me-2" aria-hidden="true"></span>Login
                            </NavLink>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>


            </ul>
        </div>
    </div>
</nav> *@
@code{
    private string welcomeText { get; set; } 
    protected override void OnInitialized()
    {
        _SharedStateService.OnChange += OnSharedStateChanged;
        GetInitialCount();
    }
    private void OnSharedStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public async Task GetInitialCount()
    {
        var AuthState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = AuthState.User;
        welcomeText = user.Identity?.Name != null ? $"Welcome, {user.Identity.Name}!" : "Welcome!";
        if (user.Identity.IsAuthenticated)
        {
            _SharedStateService.TotalCartCount = await _CartRepository.GetTotalCartCountAsync(user?.FindFirst(u=>u.Type.Contains("nameidentifier"))?.Value);
        }
    }
    public void Dispose()
    {
        _SharedStateService.OnChange -= OnSharedStateChanged;
    }
}